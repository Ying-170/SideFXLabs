def ReportResult(hda_node, file, tag=None):

    PDGPrint = hda_node.parm('pdg_logoutput').evalAsInt()
    
    if PDGPrint:
        if tag!=None:
            print ("OUTPUT_FILE: %s; file/%s" % (file, tag))
        else:
            print ("OUTPUT_FILE: %s;" % file)
            
    return

    

def switchMode(node):

    node.setParms({"override_pa": 0, "override_c": 0, "override_a": 0, "exportvtxcol": 0})
    node.setParms({"packnorm_soft": 0, "packnorm_fluid": 0})
    node.setParms({"fluidpass": 0, "fluiduvinalphas": 0, "fluiduvinrg": 0, "enable_lookup": 1})
    node.parm("resetinclude").pressButton()

    return 
    


def toggleCustomShapes(node):

    custom_shapes = node.evalParm("customshapes")
    multi_shapes = node.evalParm("multishapes")
    
    if custom_shapes == 1 and multi_shapes == 1:
        node.setParms({"supportparticleinterpolate": 1})
        
    elif custom_shapes == 0:
        node.setParms({"exportvtxcol": 0})
    
    return
    
    

def cookAndRender(node):

    node.setParms({"enablecooking": 1})
    node.parm("resetsims").pressButton()
    node.parm("execute").pressButton()
    
    return



def enableCooking(node):

    node.parm("resetsims").pressButton()
    
    if node.evalParm("enablecooking") == 0:
        node.setParms({"persistliveupdate": 0})
    
    return



def setCoordSystem(node):

    system = node.parm("coordsys").evalAsInt()

    if system == 0:
        node.setParms({"coord_pos": 0, "coord_flip": 0, "coord_rot": 0})
    
    elif system == 1:
        node.setParms({"coord_pos": 1, "coord_flip": 2, "coord_rot": 11})
        
    elif system == 2:
        node.setParms({"coord_pos": 0, "coord_flip": 1, "coord_rot": 8})
        
    elif system == 3:
        node.setParms({"coord_pos": 1, "coord_flip": 0, "coord_rot": 8})

    return



def geoFileNameAppend(node):

    append_mode = node.evalParm("geosuffixmode")

    if append_mode == 1:

        start = node.evalParm("f1")
        end = node.evalParm("f2")
        frame_count = str(end - start + 1)
        node.parm("geosuffix").set("_" + frame_count + "F")
    
    elif append_mode == 2:
    
        start = node.evalParm("f1")
        end = node.evalParm("f2")
        frame_count = str(end - start + 1)
        append = "_" + frame_count + "F_"
        append += str(int(hou.fps())) + "FPS"
        node.parm("geosuffix").set(append)

    elif append_mode == 3:
        
        node.parm("geosuffix").set("_" + str(int(hou.fps())) + "FPS")

    else:
        node.parm("geosuffix").set("")

    return



def setSubDirectories(node):

    if hou.evalParm("addsubdir") == 0:

        node.setParms({"subdir_geo": '', "subdir_tex": '',
                       "subdir_data": '', "subdir_unity": ''})

    else:

        node.parm("subdir_geo").revertToDefaults()
        node.parm("subdir_tex").revertToDefaults()
        node.parm("subdir_data").revertToDefaults()
        node.parm("subdir_unity").revertToDefaults()

    return



def resetInclude(node):

    if hou.evalParm("mode") != 3:

        include = node.evalParm("include")

        if include == 'gprc':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(1)
            node.parm("enable_col").set(1)

        elif include == 'gpr':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(1)
            node.parm("enable_col").set(0)

        elif include == 'gpc':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(1)

        elif include == 'gp':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(0)

        elif include == 'g':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(0)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(0)

        else:

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(1)
            node.parm("enable_col").set(1)

    else:

        include = node.evalParm("include_sprite")

        if include == 'gpc':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(1)

        elif include == 'gp':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(0)

        elif include == 'g':

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(0)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(0)

        else:

            node.parm("enable_geo").set(1)
            node.parm("enable_pos").set(1)
            node.parm("enable_rot").set(0)
            node.parm("enable_col").set(1)
    
    return



def postRender(node):

    node = hou.pwd().parent()
    pad = node.evalParm("padpowtwo")
    tex_node = hou.node("../textures/size/")
    size1 = tex_node.evalParm("size1")
    size2 = tex_node.evalParm("size2")
    pow2sizex = tex_node.evalParm("pow2sizex")
    pow2sizey = tex_node.evalParm("pow2sizey")

    if pad == 1:
        node.parm("finaltexsizex").set(pow2sizex)
        node.parm("finaltexsizey").set(pow2sizey)
    else:
        node.parm("finaltexsizex").set(size1)
        node.parm("finaltexsizey").set(size2)    

    if node.evalParm("mode") == 2 and node.evalParm("fluidpass") == 1:
        pass
        
    else:
        if node.evalParm("engine") == 'unreal':

            geo = node.node("objects/TEXTURE/embed_data_to_bounds_msg").geometry()

            embedded_data = ''

            # Unreal X
            embedded_data += 'Texture Format / Position Texture Count / ' + '\n'
            embedded_data += 'Animation UV Row Count Higher Part' + '\n'
            decoded = geo.attribValue("__bound_decoded")[2]
            embedded_data += '{:.6f}'.format(decoded) + ' [X]'

            uv_row_count_high = round(decoded * 100.0)

            if uv_row_count_high % 25 < 0.05 or uv_row_count_high % 10 < 0.05:
                uv_row_count_high = 0

            else:
                uv_row_count_high = 25 - abs(uv_row_count_high % 50 - 25)
                uv_row_count_high -= uv_row_count_high // 10

            embedded_data += ' / ' "{:.0f}".format(uv_row_count_high) + ' Hundred Rows \n \n'

            # Unreal Y
            embedded_data += geo.attribValue("__max_y_data") + '\n'
            decoded = geo.attribValue("__bound_decoded")[1]
            embedded_data += '{:.6f}'.format(decoded) + ' [Y] \n \n'

            # Unreal Z
            embedded_data += geo.attribValue("__max_x_data") + '\n'
            decoded = geo.attribValue("__bound_decoded")[0]
            embedded_data += '{:.6f}'.format(decoded) + ' [Z] \n \n'

            # Unreal R
            embedded_data += geo.attribValue("__min_z_data") + '\n'
            decoded = geo.attribValue("__bound_decoded")[5]
            embedded_data += '{:.6f}'.format(decoded) + ' [R] \n \n'

            # Unreal G
            embedded_data += geo.attribValue("__min_x_data") + '\n'
            decoded = geo.attribValue("__bound_decoded")[3]
            embedded_data += '{:.6f}'.format(decoded) + ' [G] \n \n'

            # Unreal B
            embedded_data += 'Animation Frame Count / ' + '\n'
            embedded_data += 'Animation UV Row Count Lower Part' + '\n'
            
            uv_row_count_low = geo.attribValue("__bound_decoded")[4]
            uv_row_count = uv_row_count_high * 100.0 + uv_row_count_low

            if uv_row_count != 0:
                decoded = size2 / uv_row_count

            else:
                decoded = -1

            decoded = round(decoded)
            embedded_data += "{:.0f}".format(decoded) + ' Frames [B]'
            embedded_data += ' / ' "{:.0f}".format(uv_row_count_low) + ' Sub-hundred Row(s)'
            embedded_data += ' / ' "{:.0f}".format(uv_row_count) + ' Total Row(s)'
            
            node.parm("embeddeddata").set(embedded_data)

        else:

            node.parm("embeddeddata").set('')


    if node.evalParm("persistliveupdate") == 0:
        node.parm("enablecooking").set(0)
    
    node.parm("previewtexsize").set(0)

    return



def setEnginePreset(node):

    engine = node.evalParm("engine")

    if engine == 'unreal':

        node.parm("coordsys").set(3)
        node.parm("scale").set(100)
        node.parm("coord_pos").set(1)
        node.parm("coord_flip").set(0)
        node.parm("coord_rot").set(8)
        node.parm("shaderengine").set('unreal')

        node.parm("debugplane").set(1)
        node.parm("autobinormalmode").set(0)
        node.parm("pivotencoding").set(1)

    elif engine == 'unity':
        
        node.parm("coordsys").set(2)
        node.parm("scale").set(1)
        node.parm("coord_pos").set(0)
        node.parm("coord_flip").set(1)
        node.parm("coord_rot").set(8)
        node.parm("enable_unitymat").set(1)
        node.parm("shaderengine").set('unity')

        node.parm("debugplane").set(0)
        node.parm("autobinormalmode").set(0)
        node.parm("pivotencoding").set(2)

    elif engine == 'custom':
        
        node.parm("debugplane").set(0)
        node.parm("autobinormalmode").set(0)
        node.parm("pivotencoding").set(0)
        
        pass

    return